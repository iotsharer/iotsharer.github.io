<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[小城故事]]></title>
    <url>%2F2018%2F04%2F10%2F%E5%B0%8F%E5%9F%8E%E6%95%85%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[回忆像个说书的人 ——《小小》 昨天就从学校回到家中，离家四五个月甚是想念，尽管一个人在家，却在左邻右舍的帮助下不用担心吃饭的问题。 小城的故事总是离不开住在小城的人 今天早晨，早早就起了床和邻居准备一起坐车到县城去采购年货。刚上车时，由于离车子出发还有一段时间，车上的男人们便开始找自己的熟人开始谈论起“国家大事”，不用担心他们找不到“谈友”，小镇不大，即使互相不认识，见了面马上就可搭上线，然后就从镇里修路谈到谁家买了新车，你一言我一语。女人们就更不用说了家长里短聊个不停，整个车厢好不热闹。直到车子启动时，大家似乎聊累了又或者攒了好几天的话题都聊得差不多了，总之车子里渐渐安静下来。 可是这样的平静只是暂时的。后来车子半路又上了一位带着孩子的妇女，刚开始她还很安静，当车子经过殡仪馆时她终于忍不住了，开始说起她的故事。她说自己改嫁了，带着两个女儿组建了新的家庭，今天早上突然收到消息说前任丈夫的父亲突然去世了，去世前就提到想看一眼自己的孙女，可是没等他看到就突然离开了这个世界，可能是出于对前任公公的当年对她的照顾的感激之情，大女儿要考试，她就带着小女儿立刻从家中出发，临行前还和现在的丈夫吵了一架，因为他阻止自己。当说到这里车里的无论是男人还是女人都停止了之前的简单附和，七嘴八舌的讨论了起来，有鼓励那位妇女的，有指责她的丈夫的，最后又统一批判她的丈夫，原本静下来的车厢就这样再次热闹了起来，直到妇女下车，大家才意犹未尽，停止了批判，车子又再次安静下来。 小城的故事总是离不开小城的建筑 伴随着发动机轰鸣声，车子还在缓缓的前进着，不知不觉就经过了自己的初中母校，当看到自己初中时住过的小瓦房被周围的高楼淹没时，既感到庆幸又感到几分心疼，庆幸是因为房子还在，心疼的是因为在一栋栋崭新的高楼面前她的是那样的无助，像一个年迈的老人在固守着自己脚下的土地，如果有一天她不在了，关于那所学校的记忆将无处安放…… 就这样一路边坐车边思考不知不觉就进了城，时隔两年终于又见到了熟悉的城墙。 千百年来的风风雨雨，击打在她的身上，却在后人的精心维护下并没有留下多少岁月的痕迹，作为回报每次洪水泛滥时，她总能将洪水阻挡在外面，保护着小城里的人们。她就像母亲的怀抱，默默守护着小城，小城的故事都在她的见证下上演 小城的故事少不了幽深的巷子 进了城墙，就到了小城的中心地带，里面两排都是一些仿古建筑，中间是一条并不怎么宽的马路，路上跑着小汽车，摩托车当然少不了古城的特色人力车 一边是现代车辆，一边是传统车辆，显得格格不入，却又因为小城的存在彼此相安无事，这也许就是小城的魅力所在，当然想要体会最纯正的小城，还得走进小城的巷子。 小城的巷子很多，而且很深，放眼望去全是屋檐和瓦片，很多巷子彼此之间还可以相互联通，有住家的，有卖东西的，巷子里你会看到老人们三三两两懒洋洋地聚在一起或是打牌或是下棋，几个小屁孩在追逐打闹，说不出的闲暇与快节奏的城市似乎显得格格不入；巷子里你可以找到小城最正宗的小吃：正宗的淮南牛肉汤，大救驾…… 千百年来小城的故事每天都在上演着，只是演员换了一批又一批，庆幸的是小城长大的孩子从生下来就打下了小城的印记，哪怕他们长大了，离开了，在他们心里永远都有一座城墙，默默守护着他们的印记，有了印记无论走得再远他们总能找到回家的路，找到他们儿时打闹过的小巷…… 小城的名字叫寿县，古时称寿春，是春秋战国时期楚国的国都所在地，是豆腐的发源地。]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DIY智能卧室（一）之总体设计篇]]></title>
    <url>%2F2018%2F04%2F10%2FDIY%E6%99%BA%E8%83%BD%E5%8D%A7%E5%AE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E6%80%BB%E4%BD%93%E8%AE%BE%E8%AE%A1%E7%AF%87%2F</url>
    <content type="text"><![CDATA[前面几期简单的介绍了一下如何DIY打造一款智能温湿度计，实用性还并不怎么强，当然这只是Arduino功能的牛刀小试，只是希望能够小小预热一下，接下来几期我将和大家一起开始将Arduino用于实战，打造智能卧室。 #一、模块介绍1、短信提醒模块。打算采用野火WF-SIM900A GSM/GPRS模块，可以与Arduino结合用于发送短信。2、语音控制模块。打算采用非特定人声语音识别模块 语音控制、播放模块，可以与Arduino结合可以控制继电器等多种原件。3、烟雾报警模块。打算采用MQ-2型气敏元件，可以很灵敏的检测到空气中的烟雾以及甲烷气体，可以通过Arduino获取传感器信息，若判断发生气体泄漏或者火灾，控制短信提醒模块向指定手机发送短信，同时可以控制蜂鸣器发出警报4、人体检测模块。打算采用红外热释电传感器，能检测到人体或动物身上发出的红外线，可以通过Arduino获取传感器信息，若判断有人入侵，控制短信提醒模块向指定手机发送短信，同时可以控制蜂鸣器发出警报。 #二、功能介绍1、可以防火防盗，此乃居家旅行必备良品。2、可以通过语音控制达到不动手就可以控制家里电器的目地，让生活变得更加简单，充满乐趣。 #三、实验涉及物品清单1、Arduino Uno2、野火WF-SIM900A GSM/GPRS模块3、语音模块4、MQ-2气体传感器5、红外热释传感器6、蜂鸣器7、导线若干]]></content>
      <tags>
        <tag>Arduino</tag>
        <tag>DIY</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DIY智能温湿度计之升级篇]]></title>
    <url>%2F2017%2F11%2F20%2FDIY%E6%99%BA%E8%83%BD%E6%B8%A9%E6%B9%BF%E5%BA%A6%E8%AE%A1%E4%B9%8B%E5%8D%87%E7%BA%A7%E7%AF%87%2F</url>
    <content type="text"><![CDATA[#一、工具 ##1、Arduino UNO ##2、DHT11温湿度传感器 ##3、HC-05蓝牙模块 ##4、Android手机 ##5、蓝牙串口助手 ##6、红色LED和绿色LED ##7、蜂鸣器 #二、接线1、蜂鸣器正极接引脚8，负极接arduino的GND2、红色LED和绿色LED正极分别接引脚13和12,负极接arduino的GND（正极为LED较长引脚一端）3、DHT11的out、VCC、GND分别接arduino的引脚4、5V、GND4、hc-05的VCC、GND、RXD、TXD分别接arduino的5V、GND、TXD、RXD #三、编程 ##1、功能可以通过蓝牙模块将数据传递到手机APP的同时系统可以自行工作，若温度大于一定值红灯亮，蜂鸣器报警；若温度小于一定值绿灯亮，蜂鸣器报警。 ##2代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include&lt;dht.h&gt;dht DHT;int buzzer=8;//设置控制蜂鸣器的数字IO脚int rled = 13;//设置红色LED的数字IO脚int gled = 12;//设置绿色LED的数字IO脚#define DHT11_PIN 4//定义dht11输出端的数字IO脚void setup() &#123; Serial.begin(9600); //设置数字IO脚模式 pinMode(buzzer,OUTPUT); pinMode(rled, OUTPUT); pinMode(gled, OUTPUT); &#125; void loop() &#123; int chk = DHT.read11(DHT11_PIN);int t=DHT.temperature;// t为此时温度值// Serial.println(t);//用于调试// 当温度大于20摄氏度时红灯亮，蜂鸣器报警（温度值可以自行设定）if(t&gt;20)&#123; digitalWrite(rled, HIGH); // delay(1000); fmq(); delay(1000);&#125;// 当温度小于18摄氏度时红灯亮，蜂鸣器报警（温度值可以自行设定）else if(t&lt;18)&#123; digitalWrite(gled, HIGH); // delay(1000); fmq(); delay(1000); &#125;//正常情况下两个LED灯都不亮else&#123; digitalWrite(rled, LOW); digitalWrite(gled, LOW); &#125;//蓝牙控制char val;val = Serial.read();if(val!=-1) &#123; switch(val) &#123; case 'T': wsd(); delay(50); break; &#125;&#125;&#125; void wsd()&#123; Serial.println("Type,\tstatus,\tHumidity (%),\tTemperature (C)"); Serial.print(DHT.humidity,1); Serial.print(",\t"); Serial.println(DHT.temperature,1);&#125;void fmq()&#123; unsigned char i;//定义变量 for(i=0;i&lt;80;i++)//辒出一个频率的声音 &#123; digitalWrite(buzzer,HIGH);//发声音 delay(1);//延时1ms digitalWrite(buzzer,LOW);//不发声音 delay(1);//延时ms &#125; &#125; #四、总结不知不觉已经更新三期了，从一开始的单纯获取传感器消息到最后不断完善整个系统，智能温湿度计也越来越智能，当然它还有很多的提升空间，比如可以发送短信提醒，通过网络实现远程控制等等。当然，系统还有很多不足之处：不美观、没有使用面包板接线有点乱、程序没有引入中断不同功能之前可能会产生冲突等等。总的来说，整个系统有可取之处也有不足之处，但是在这里智能温湿度计模块的内容就不继续更新了，感兴趣的朋友可以自己上手一块Arduino继续完善。其实文章的重点不在于简简单单介绍整个智能温湿度计系统，而是希望更多的人了解并走进Arduino的世界。欢迎大家加入开源硬件的世界。同时也欢迎大家关注我的下个系列文章《手把手教你打造智能寝室》]]></content>
      <tags>
        <tag>Arduino</tag>
        <tag>DIY</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DIY智能温湿度计]]></title>
    <url>%2F2017%2F11%2F17%2FDIY%E6%99%BA%E8%83%BD%E6%B8%A9%E6%B9%BF%E5%BA%A6%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[一、工具1、Arduino UNO2、HC-05蓝牙参数（数据来自七星虫官网） 采用CSR主流蓝牙芯片，蓝牙V2.0协议标准* 串口模块工作默认电压3.6~6V。* 波特率为4800，9600,19200，38400，57600，115200用户可设置。默认9600* 核心模块尺寸大小为：28mm x 15 mm x 2.35mm。* 工作电流：配对中：30～40mA配对完毕未通信：2～8mA 。通信中：8mA* 休眠电流：无休眠* 3、DHT114、Android手机5、蓝牙串口助手（Android版点击即可下载，iOS版暂时不提供） 蓝牙串口助手是一款基于RFCOMM蓝牙串口服务的传输软件，通过该软件可以连接蓝牙串口模块进行通信，实现手机串口连接。类似计算机的串口助手，是电子工程师的开发利器 三、接线1、DHT11的S、+、-接口分别接Arduino的引脚4（可以根据自己的需要选择其他引脚）、5V、GND。2、蓝牙RXD、TXD、VCC、GND分别接Arduino的TXD、RXD、5V、GND（千万不要弄混哟，RXD–&gt;TXD） 四、编程1、功能程序可以获取当前环境温湿度，并通过蓝牙将数据实时传送到Android手机APP中，打开APP就可以显示。 2、代码12345678910111213141516171819202122232425262728293031#include&lt;dht.h&gt;#define DHT11_PIN 4//定义dht11信号线S为引脚4dht DHT;void setup()&#123;Serial.begin(9600);//初始化端口&#125;//循环void loop()&#123;int val=Serial.read();//读取串行端口的值switch (val)&#123;//如果手机端输入“T”，则执行wsd()函数。（T可以根据自身需要修改，但要与APP端同步） case 'T': wsd();break;&#125;&#125;void wsd()//定义温湿度函数&#123; //分别显示测量湿度、温度值int chk = DHT.read11(DHT11_PIN);//读取传感器获取的数据//在串口输出湿度和温度的单位分别是%和C（摄氏度）Serial.println("Type,\tstatus,\tHumidity (%),\tTemperature (C)");Serial.print(DHT.humidity,1);Serial.print(",\t");Serial.println(DHT.temperature,1);delay(1000);//延时1s&#125; 3、手机端操作安装并打开蓝牙串口助手App（Android版），设置好后显示蓝牙连接成功后，会出现下面的效果（篇幅有限具体APP使用方法请参照文章蓝牙串口助手使用方法）点击“温度”按钮，就会出现实验结果 五、用途1、蓝牙用途：可用于GPS导航系统，水电煤气抄表系统等2、智能温湿度计用途：集娱乐性和实用性于一体。可以通过手机APP实时获取当前环境准确温湿度信息，可以用于节水农业灌溉、温室大棚等等 六、拓展1、视觉上：可以在原有系统内加入红色LED和蓝色LED小灯，如果温度过高这控制红灯亮，如果温度过低则蓝灯亮2、听觉上：可以加入蜂鸣器，温度过高或过低即可发出警报视觉与听觉相结合的智能温湿度计是不是更加有意思，有没有亲自动手做一个的欲望！请关注我的下一篇文章《DIY智能温湿度计升级篇》，到时候我还会附上源代码。 参考来源：1.Arduino官方网站2.Arduino中文社区]]></content>
      <tags>
        <tag>DIY</tag>
        <tag>arduino</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Arduino和Genuio产品入门指南（译）]]></title>
    <url>%2F2017%2F03%2F25%2FArduino%E5%92%8CGenuio%E4%BA%A7%E5%93%81%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97%EF%BC%88%E8%AF%91%EF%BC%89%2F</url>
    <content type="text"><![CDATA[原文:Getting Started with Arduino and Genuino products 地址：https://www.arduino.cc/en/Guide/HomePage 欢迎使用Arduino！在您开始控制您身边的世界前，您将需要配置相应的开发环境来对您的开发板编程。 Arduino开发软件（IDE）允许您对开发板进行编程和程序烧写。在Arduino软件下载页面您就会发现两种选择： 1、如果您有稳定的网络连接，建议您选择在线编程（Arduino网页编辑器）。您可以将你的程序（Sketches）保存在云端，在任何设备中都可以使用和备份。您无需任何更新安装操作就可以享有最新版本的开发环境和社区生成的库文件。 2、如果您一定要离线使用，您需要使用最新的版本的桌面开发环境。 在Arduino网页编辑器上在线编程 按照这些说明来使用在线开发环境。记住板子在网页编辑器无需安装任何驱动就可以直接使用。 搭建Arduino桌面开发环境 根据您的操作系统选择下面的链接获取一步步操作说明。 Windows Mac OS X Linux Portable IDE 在列表中正确的选择您的开发板，学习如何开始使用它和桌面开发环境。 学习Arduino 读一个关于什么是Arduino和你为什么想要使用它的说明。 什么是Arduino开发环境和如何修改默认语言。 库文件：这里将为您展示如何使用和安装Arduino库文件。 内核：想要让您的Arduino开发环境上支持新的开发板吗？这里将为您展示如何安装相关的内核并且管理它。 解决故障：这里收集了关于您使用Arduino产品可能会遇到的问题的一些建议。 如果您完成了所有的入门指南，那么恭喜您，您可以访问基础模块了，在那里您将会学到关于Arduino平台背后的原理和技巧的深入知识。 我可以用一个Arduino或者Genuino开发板干什么？如果您还在徘徊自己第一个项目是什么，您不妨尝试用一下 Arduino and Genuino入门套件，它将引导您从电子的最初步骤到互动和感应对象的世界。如果您在找寻灵感的路上，Arduino Project Hub各种各样的教程正等着与您邂逅。最新版本由AP（ps.我也表示不知道是谁）于2017.1.3更新。 Arduino入门指南的文本以Creative Commons Attribution-ShareAlike 3.0许可证授权。指南中的代码示例将公布到公共区域。 个人学习翻译作品，继承Arduino开源精神，本文同样以Creative Commons Attribution-ShareAlike 3.0许可证授权，您可以自由分享，修改，或者引用，引用时希望您尊重个人努力成果，注明来源。个人水平有限，不足之处还望多多指正]]></content>
      <tags>
        <tag>Arduino</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Arduino编程风格（译）]]></title>
    <url>%2F2017%2F03%2F17%2FArduino%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC%EF%BC%88%E8%AF%91%EF%BC%89%2F</url>
    <content type="text"><![CDATA[原文：Arduino style guide地址：https://www.arduino.cc/en/Reference/StyleGuide译者注：本文将告诉你如何写一个Arduino示例，文中介绍了Arduino规范化编程的一些准则，这些准则在其他语言编程中同样适用，因此具有一定的参考价值！ 这是一个用于编写规范的Arduino示例的指南，适合初学者和同样也适合高级用户使用。当然您大可不必按照这种方式编程，但是如果您想要您的代码可以让不同水平的都可以清晰的读懂，那么它可以帮到您。这不是一套强硬的准则，仅仅只是一些参考。有些参考甚至可能彼此冲突。利用您的判断力在何时这些指导原则最通顺上，如果您不确定，咨询那些将要通过您写的例子学习的人，这会让您有更好的理解。另外您有可能对Arduino API风格指南感兴趣。 写一个教程（大部分内容是从多年来各家的编辑那里引用来的） 请用主动语态写 语言写得清楚直白，就像遵循你的指令的人和你在一个房间一样。 在给一些指令时，最好用第二人称，以便读者明白她将是执行者。 请使用短小,简洁的陈述句或命令而不是复合句。这可以让读者更容易一次消化一个指令。 请给出明确的指示就像：“下一步，你将要读取传感器”“创建一个名为thisPin的变量”避免没有意义的短语。不要告诉读者“您要设置引脚”这样的指示，只需要告诉她“设置引脚” 请使用图片和原理图，而不是仅仅只有原理图。 许多电子爱好者不读原理图。 检查你的假设。读者是否理解您在教程中使用的所有概念？ 如果没有，解释或链接到另一个教程。 从概念上解释事物，这样读者对他将要做的就有一个大的了解。 然后安排如何一步一步的执行指令。 每当您初次使用一个技术术语时，请先定义它。请人帮忙您检查您是否定义了所有的新术语，您有可能会漏掉其中一两个。 请与您使用过的术语保持一致。如果您通过新名称引用元件或概念，请将其与其他名称的关系明确显示。除非您明确告诉读者两个术语是等价的，否则不要使用两个可以互相交换的术语。 在没有拼写出它们的全称前不要使用缩写词或缩写 让您的例子更加简洁有针对性。除非是关于组合概念的教程，否则不要组合概念或功能。 #写示例代码 稳定比效率更重要。 Arduino的主要用户都是一些不关注代码的初学者，他们关心的重点是项目的完成。 别人比你了解代码少是很正常的事。不要认为他们需要理解一些学术概念。他们不需要，他们不理解代码不是因为他们愚蠢。你的代码应该可以自我解释，或者使用注释来做同样的事情。如果需要一个复杂的概念，如寄存器、中断或指针，要么解释它，要么跳过它。 在面临技术上简单和高效选择时，请选择前者。 除非介绍的概念很有用，否则尽量少介绍并且在每个例子中减少新概念的数量。例如，在刚开始，您可以解释没有int以外的变量类型的简单函数，也可以用常数来定义引脚号。另一方面，在一个中间的例子中，您可能希望引入周边概念，因为它们变得有用。 像使用const ints来定义引脚号的概念，当你不需要超过0 - 255时，在int中选择字节等等是有用的，但这不是入门的核心。 所以请谨慎使用它们，并在新教程中解释它们。 请将1234567# 注释你的代码* 注释所有的变量和常量声明，并且声明变量的作用。* 注释所有的代码块。如果可能的话，在代码块前注释，这样读者就能了解代码块的作用。* 注释所有的循环。* 使用详细的if语句。即为了可以将代码更加直观的呈现给读者，请使用程序块格式进行所有操作。避免使用下面这种格式： if (somethingsIsTrue) doSomething1用下面这种格式代替： if (somethingsIsTrue==True){ doSomething; }12* 避免使用指针* 避免使用```#define 变量 避免使用单字母变量名。使它们具有描述性。 避免使用像123* 如果要定义引脚名称和其他不会改变的数值，请使用const ints。他们与#defines相比不是那么凌乱，但仍然给你一种讲解变量和常数之间的区别的方法。* 使用接线/处理类型的变量类型，例如 boolean，char，byte，int，unsigned int，long，unsigned long，float，double，string，array，void，如果可能的话，尽量不用uint8_t等。前者在文档中有说明，更简洁的名称。* 避免让用户混淆的编号方案，像： pin1 = 2pin2 = 3etc.1* 如果你需要重新编号引脚，考虑使用数组，如下所示： int myPins[] = { 2, 7, 6, 5, 4, 3 };1* 这允许您使用数组元素来引用新的引脚号，如下所示： digitalWrite(myPins[1], HIGH); //打开引脚71* 它还允许您按照所需的顺序打开或关闭所有引脚，如下所示： for (int thisPin = 0; thisPin &lt; 6; thisPin++) { digitalWrite(myPins[thisPin], HIGH); delay(500); digitalWrite(myPins[thisPin], LOW); delay(500);}123# 刚开始就解释代码这是一个很好的标题块： /* 程序标题 从一个外行人的视角来解释程序的功能。请参阅各种引脚附件。 电路： 列出每个输入组件 列出每个输出组件创建年月日创建者名字修改年月日修改者名字http://url/of/online/tutorial.cc*/```电路 对于数字输入开关，默认是在开关上使用下拉电阻，而不是上拉。 这样，开关的交互逻辑对非工程师是有意义的。 保持您的电路简单。例如，旁路电容器是方便的，但是大多数简单的输入可以在没有它们的情况下正常工作。 如果一个组件是偶然的，请稍后解释。 更正，建议和新的文件应该发布到论坛。 Arduino参考文本以Creative Commons Attribution-ShareAlike 3.0许可证授权。指南中的代码示例将公布到公共区域。 个人学习翻译作品，感谢好友@Morning在翻译过程中提供的指导继承Arduino开源精神，本文同样以Creative Commons Attribution-ShareAlike 3.0许可证授权，您可以自由分享，修改，或者引用，引用时希望您尊重个人努力成果，注明来源。个人水平有限，不足之处还望多多指正]]></content>
      <tags>
        <tag>Arduino</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我在二本院校学物联网]]></title>
    <url>%2F2017%2F01%2F27%2F%E6%88%91%E5%9C%A8%E4%BA%8C%E6%9C%AC%E9%99%A2%E6%A0%A1%E5%AD%A6%E7%89%A9%E8%81%94%E7%BD%91%2F</url>
    <content type="text"><![CDATA[今天是大年三十，看不下去春晚了，就抽个时间好好写一写总结。 不知不觉在安徽一所普通的二本大学已经三年了，虽然已经记不清偷偷骂过学校多少次了，抱怨过多少次那个坑爹的培养计划；但是不得不说很珍惜这一段大学时光，还没有做好离开的准备。 好了，闲话不多说了，开始进入正题。我们学校的物联网专业学习的课程大都停留在理论层次上，主要是学一点编程知识和一点硬件知识。编程主要是C语言、java和网页设计；硬件主要是模电数电还有单片机嵌入式。听起来好像学了很多，其实编程只是停留在解决数学问题上，而硬件因为种种原因大多操作停留在用模拟软件模拟上模，即使可以接触到实验大多都是演示实验，我们负责看着就好。学这些东西有用吗？没用！因为这些东西如果感兴趣自学效果会更好，而且效率更高。 那么问题来了，上课学不了多少知识有没有其它途径提高自身能力呢？当然有！跟着老师后面学点东西虽然学了一些东西，但是随着接触到的知识越来越多，总感觉存在一个瓶颈，阻碍自己进一步认识物联网。有过不少关于物联网的创意，想要通过参加学科竞赛来寻求突破，但是总感觉自己的想法有局限性，甚至是不切实际，连自己都说服不了。不停地参加比赛不过是在浪费时间和精力。 就这样一直陷入困惑和迷惘之中，直到决定开始一步步自己动手搭建一个小的物联网系统。在参考phodal大神的《自己动手搭建物联网系统》的同时，结合自己掌握的知识，从单片机到服务器，从前端到后端 ，一步步开始设计，在不停的遇到问题解决问题中，对物联网才有了更深的认识。期间走了不少弯路，却也拓展了自己的视野，也渐渐明白，所谓瓶颈不过是因为动手的太少。学习是一个理论与实践不断结合的过程，理论与实践彼此相互印证相互促进，单单只有理论或实践是很难走远的。 还有20分钟就要到新的一年了，新年快乐，新的一年继续努力。]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>物联网</tag>
      </tags>
  </entry>
</search>
